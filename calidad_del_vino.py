# -*- coding: utf-8 -*-
"""Calidad del vino.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18Txoa020p1A9X41hBk8WFfpg9xlFJraS
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

data = pd.read_csv('/content/sample_data/WineQT.csv')

data.head()

data = data.drop('Id',axis=1)

data.head()

data.info()

data.describe().T

data['quality'].unique()

correlation_matrix = data.corr()
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, vmin=-1, vmax=1)
plt.title('Correlation Matrix')
plt.show()

quality_correlation = correlation_matrix['quality'].sort_values(ascending=False)
print(quality_correlation)

data.columns

cols = ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar',
       'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density',
       'pH', 'sulphates', 'alcohol']
for col in cols:
        sns.boxplot(data=data, x='quality', y=col)
        plt.title(f'Quality vs {col}')
        plt.show()

ax = sns.countplot(x='quality', data=data)

for p in ax.patches:
    ax.annotate(f'{p.get_height()}', (p.get_x() + p.get_width() / 2, p.get_height()),
                   ha='center', va='center', fontsize=10, color='black', xytext=(0, 5),
                   textcoords='offset points')
plt.title('Distribucion de la calidad')
plt.show()

data_log = data.copy()

for cols in cols:
  data_log[cols] = np.log1p(data_log[cols])

data.head()

data_log.head()

for col in cols:
        sns.boxplot(data=data_log, x='quality', y=col)
        plt.title(f'Quality vs {col}')
        plt.show()

cols = ['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar',
       'chlorides', 'free sulfur dioxide', 'total sulfur dioxide', 'density',
       'pH', 'sulphates', 'alcohol']
for col in cols:
        sns.boxplot(data=data_log, x='quality', y=col)
        plt.title(f'Quality vs {col}')
        plt.show()

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score


x = data.drop('quality', axis=1)
y = data['quality']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

print(y_train.value_counts())
print(y_test.value_counts())

model_col = []

for col in cols:
  model_col.append(col)
  model = RandomForestClassifier(random_state=0)
  model.fit(x_train[model_col],y_train)
  y_pred = model.predict(x_test[model_col])
  accuracy = accuracy_score(y_test, y_pred)
  print(f'PRecision con {model_col}: {accuracy}')

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, stratify=y,random_state=42)

print(y_train.value_counts())
print(y_test.value_counts())

model_col = []

for col in cols:
  model_col.append(col)
  model = RandomForestClassifier(random_state=0)
  model.fit(x_train[model_col],y_train)
  y_pred = model.predict(x_test[model_col])
  accuracy = accuracy_score(y_test, y_pred)
  print(f'Precision con {model_col}: {accuracy}')

x = data_log.drop('quality', axis=1)
y = data['quality']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

model_col = []

for col in cols:
  model_col.append(col)
  model = RandomForestClassifier(random_state=0)
  model.fit(x_train[model_col],y_train)
  y_pred = model.predict(x_test[model_col])
  accuracy = accuracy_score(y_test, y_pred)
  print(f'Precision con {model_col}: {accuracy}')

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, stratify=y,random_state=42)
model_col = []

for col in cols:
  model_col.append(col)
  model = RandomForestClassifier(random_state=0)
  model.fit(x_train[model_col],y_train)
  y_pred = model.predict(x_test[model_col])
  accuracy = accuracy_score(y_test, y_pred)
  print(f'Precision con {model_col}: {accuracy}')

